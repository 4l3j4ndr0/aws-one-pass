Transform: AWS::Serverless-2016-10-31
Resources:
  AwsOnePassUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      AliasAttributes:
        - email
        - preferred_username
      UserPoolName: !Sub ${AWS::StackName}-AwsOnePassUserPool
      AutoVerifiedAttributes:
        - email
  AwsOnePassUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: AwsOnePassUserPoolClient
      UserPoolId: !Ref AwsOnePassUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      CallbackURLs:
        - http://localhost:9090
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - openid
        - aws.cognito.signin.user.admin
      SupportedIdentityProviders:
        - COGNITO
  UserPoolUICustomization:
    Type: AWS::Cognito::UserPoolUICustomizationAttachment
    Properties:
      UserPoolId: !Ref AwsOnePassUserPool
      ClientId: !Ref AwsOnePassUserPoolClient
      CSS: |
        .banner-customizable {
          background: linear-gradient(135deg, #e09711 0%, #411329 100%);
          background-image: url("https://assets.awslearn.cloud/one-pass.png");
          background-size: cover;
          background-position: center;
          background-repeat: no-repeat;
          height: 110px;
        }
  AwsOnePassDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: one-pass
      UserPoolId: !Ref AwsOnePassUserPool
  AwsOnePassApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${AWS::StackName}-AwsOnePassApi
      StageName: prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /secrets:
            post:
              security:
                - CognitoAuthorizer: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SecretsFunction.Arn}/invocations
              responses: {}
            put:
              security:
                - CognitoAuthorizer: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SecretsFunction.Arn}/invocations
              responses: {}
            get:
              security:
                - CognitoAuthorizer: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SecretsFunction.Arn}/invocations
              responses: {}
      TracingEnabled: true
      Cors:
        MaxAge: 5
        AllowOrigin: '''*'''
        AllowMethods: '''GET, POST, PUT, OPTIONS'''
        AllowHeaders: '''Access-Control-Allow-Origin,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt AwsOnePassUserPool.Arn
  SecretsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Function to manage all password and secrets using parameter store (aws-one-pass).
      FunctionName: AwsOnePassSecretsFunction
      CodeUri: src/SecretsFunction
      Handler: handler.handler
      Runtime: python3.8
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Architectures:
        - arm64
      Events:
        AwsOnePassApiPOSTsecrets:
          Type: Api
          Properties:
            Path: /secrets
            Method: POST
            RestApiId: !Ref AwsOnePassApi
        AwsOnePassApiPUTsecrets:
          Type: Api
          Properties:
            Path: /secrets
            Method: PUT
            RestApiId: !Ref AwsOnePassApi
        AwsOnePassApiGETsecrets:
          Type: Api
          Properties:
            Path: /secrets
            Method: GET
            RestApiId: !Ref AwsOnePassApi
      Policies:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowParameterStoreActions
            Effect: Allow
            Action:
              - ssm:PutParameter
              - ssm:AddTagsToResource
              - ssm:GetParameters
              - ssm:GetParameter
              - ssm:DescribeParameters
              - ssm:ListTagsForResource
            Resource: '*'
  SecretsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${SecretsFunction}
Outputs:
  LoginURL:
    Description: Custom Login URL
    Value: !Sub https://one-pass.auth.${AWS::Region}.amazoncognito.com/oauth2/authorize?response_type=token&client_id=${AwsOnePassUserPoolClient}&redirect_uri=http://localhost:9090
  ApiUrl:
    Description: Api URL
    Value: !Sub https://${AwsOnePassApi}.execute-api.${AWS::Region}.amazonaws.com/prod